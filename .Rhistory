polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>From ", polygon_name,
"</strong><br>", count, "trips to this district") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
qpal <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
qpal_colors <- unique(qpal(sort(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])))
print(qpal_colors)
qpal_labs <- quantile(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0], seq(0, 1, .251))
print(qpal_labs)
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~qpal(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
colors = qpal_colors,
#      pal=qpal,
labels = qpal_labs
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>From ", polygon_name,
"</strong><br>", count, "trips to this district") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
qpal <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
qpal_colors <- unique(qpal(sort(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])))
qpal_labs <- quantile(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0], seq(0, 1, .250001))
qpal_labs <- paste(lag(qpal_labs), qpal_labs, sep = " - ")
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~qpal(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
colors = qpal_colors,
#      pal=qpal,
labels = qpal_labs
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
#### SHINY UI ####
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>From ", polygon_name,
"</strong><br>", count, "trips to this district") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
qpal <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
qpal_colors <- unique(qpal(sort(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])))
qpal_labs <- quantile(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0], seq(0, 1, .250001))
qpal_labs <- paste(round(lag(qpal_labs), 4), qpal_labs, sep = " - ")
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~qpal(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
colors = qpal_colors,
#      pal=qpal,
labels = qpal_labs
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>From ", polygon_name,
"</strong><br>", count, "trips to this district") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
qpal <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
qpal_colors <- unique(qpal(sort(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])))
qpal_labs <- quantile(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0], seq(0, 1, .250001))
qpal_labs <- paste(round(lag(qpal_labs)), round(qpal_labs), sep = " - ")
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~qpal(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
colors = qpal_colors,
#      pal=qpal,
labels = qpal_labs
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
?column
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info"), height = 12),
mainPanel(leafletOutput("map"),
verbatimTextOutput("legend"), height = 12))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>From ", polygon_name,
"</strong><br>", count, "trips to this district") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
qpal <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
qpal_colors <- unique(qpal(sort(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])))
qpal_labs <- quantile(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0], seq(0, 1, .250001))
qpal_labs <- paste(round(lag(qpal_labs)), round(qpal_labs), sep = " - ")
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~qpal(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
colors = qpal_colors,
labels = qpal_labs
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map", height = "100vh"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>From ", polygon_name,
"</strong><br>", count, "trips to this district") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
qpal <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
qpal_colors <- unique(qpal(sort(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])))
qpal_labs <- quantile(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0], seq(0, 1, .250001))
qpal_labs <- paste(round(lag(qpal_labs)), round(qpal_labs), sep = " - ")
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~qpal(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
colors = qpal_colors,
labels = qpal_labs
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map", height = "85vh"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>From ", polygon_name,
"</strong><br>", count, "trips to this district") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
qpal <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
qpal_colors <- unique(qpal(sort(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])))
qpal_labs <- quantile(tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0], seq(0, 1, .250001))
qpal_labs <- paste(round(lag(qpal_labs)), round(qpal_labs), sep = " - ")
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~qpal(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
colors = qpal_colors,
labels = qpal_labs
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
