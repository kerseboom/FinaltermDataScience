pal=palQ
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
sidebarPosition = "right",
sidebarPanel(
plotOutput(outputId = "modeSplitPlot",
plot = ggplot(data = modeSplitData, aes(x = mode, y = proportion)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::percent)
),
verbatimTextOutput("modeSplitInfo")
),
mainPanel(
leafletOutput("map", height = "700px"),
verbatimTextOutput("mapLegend")
)
)
)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(
plotOutput(outputId = "modeSplitPlot",
plot = ggplot(data = modeSplitData, aes(x = mode, y = proportion)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::percent)
),
verbatimTextOutput("modeSplitInfo")
),
mainPanel(
leafletOutput("map", height = "700px"),
verbatimTextOutput("mapLegend")
)
)
)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>", polygon_name,
"</strong><br>", count, "trips to destination") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
bins <- seq(min(tvz_matrix_filtered$count, tvz_matrix_filtered$count),    # create bins for colorpal
max(tvz_matrix_filtered$count, tvz_matrix_filtered$count),
by = (max(tvz_matrix_filtered$count, tvz_matrix_filtered$count) -
min(tvz_matrix_filtered$count, tvz_matrix_filtered$count)) / 7)
pal <- colorBin("Purples",                                       # custom bin pal
domain = tvz_matrix_filtered$count,
bins = bins)
palQ <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~palQ(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
pal=palQ
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>", polygon_name,
"</strong><br>", count, "trips to destination") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
bins <- seq(min(tvz_matrix_filtered$count, tvz_matrix_filtered$count),    # create bins for colorpal
max(tvz_matrix_filtered$count, tvz_matrix_filtered$count),
by = (max(tvz_matrix_filtered$count, tvz_matrix_filtered$count) -
min(tvz_matrix_filtered$count, tvz_matrix_filtered$count)) / 7)
pal <- colorBin("Purples",                                       # custom bin pal
domain = tvz_matrix_filtered$count,
bins = bins)
palQ <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~palQ(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = bins,
title = "amount trips destinations",
pal=palQ
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>", polygon_name,
"</strong><br>", count, "trips to destination") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
bins <- seq(min(tvz_matrix_filtered$count, tvz_matrix_filtered$count),    # create bins for colorpal
max(tvz_matrix_filtered$count, tvz_matrix_filtered$count),
by = (max(tvz_matrix_filtered$count, tvz_matrix_filtered$count) -
min(tvz_matrix_filtered$count, tvz_matrix_filtered$count)) / 7)
pal <- colorBin("Purples",                                       # custom bin pal
domain = tvz_matrix_filtered$count,
bins = bins)
palQ <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~palQ(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = pal,
title = "amount trips destinations",
pal=palQ
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>", polygon_name,
"</strong><br>", count, "trips to destination") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
bins <- seq(min(tvz_matrix_filtered$count, tvz_matrix_filtered$count),    # create bins for colorpal
max(tvz_matrix_filtered$count, tvz_matrix_filtered$count),
by = (max(tvz_matrix_filtered$count, tvz_matrix_filtered$count) -
min(tvz_matrix_filtered$count, tvz_matrix_filtered$count)) / 7)
pal <- colorBin("Purples",                                       # custom bin pal
domain = tvz_matrix_filtered$count,
bins = bins)
palQ <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~palQ(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
pal=palQ
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
?addLegend()
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>", polygon_name,
"</strong><br>", count, "trips to destination") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
bins <- seq(min(tvz_matrix_filtered$count, tvz_matrix_filtered$count),    # create bins for colorpal
max(tvz_matrix_filtered$count, tvz_matrix_filtered$count),
by = (max(tvz_matrix_filtered$count, tvz_matrix_filtered$count) -
min(tvz_matrix_filtered$count, tvz_matrix_filtered$count)) / 7)
pal <- colorBin("Purples",                                       # custom bin pal
domain = tvz_matrix_filtered$count,
bins = bins)
palQ <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~palQ(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
labels = bins,
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
pal=palQ
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("MATSim Berlin scenario"),
sidebarLayout(
position = "right",
sidebarPanel(plotOutput(outputId = "plot_modalsplit"),
verbatimTextOutput("info")),
mainPanel(leafletOutput("map"),
verbatimTextOutput("legend")))
)
#### SHINY SERVER ####
server <- function(input, output) {
output$map <- renderLeaflet(map) # render leaflet map
output$plot_modalsplit <-  renderPlot({
if(is_null(input$map_shape_click$id)) {
plotModalSplitPieChart(trips)
} else {
plotModalSplitPieChart(trips %>% filter(start_district_name == input$map_shape_click$id))
}
})
observeEvent(input$map_shape_click, {  # observe polygon clicks
polygon_name <- input$map_shape_click$id  # get the clicked polygon's id
print(paste0("Origin polygon is: ", polygon_name))
tvz_matrix_filtered <- tvz_matrix_joined[tvz_matrix_joined$start_district_name == polygon_name, ] # filter data for map based on polygon name
tvz_matrix_filtered <- tvz_matrix_filtered %>%
mutate(labels = paste(
"</strong>", polygon_name,
"</strong><br>", count, "trips to destination") %>%
lapply(htmltools::HTML)
)
output$info <- renderText({
if( is_null(polygon_name) ){"no district selected. select by clicking on a district"}
else if (!is_null(polygon_name)){paste0("selected district: ", polygon_name, "\n",
"inhabitants: ", tvz_matrix_filtered$pop[1], "\n",
"total trips: ", tvz_matrix_filtered$totalCount[1], "\n",
"mobility rate: ", round(tvz_matrix_filtered$rate[1], 4), "\n")}
})
bins <- seq(min(tvz_matrix_filtered$count, tvz_matrix_filtered$count),    # create bins for colorpal
max(tvz_matrix_filtered$count, tvz_matrix_filtered$count),
by = (max(tvz_matrix_filtered$count, tvz_matrix_filtered$count) -
min(tvz_matrix_filtered$count, tvz_matrix_filtered$count)) / 7)
pal <- colorBin("Purples",                                       # custom bin pal
domain = tvz_matrix_filtered$count,
bins = bins)
palQ <- colorQuantile(palette = "YlOrRd",                          # quantile pal
domain = tvz_matrix_filtered$count[tvz_matrix_filtered$count != 0])
leafletProxy("map") %>%
removeControl("legend") %>%
clearShapes() %>%
addPolygons(data = districts,
layerId = ~Gemeinde_n,
color = "#000000",
weight = 2,
fillOpacity = 0,
noClip = T
) %>%
addPolygons(data = tvz_matrix_filtered,
layerId = ~end_district_name,
fillColor = ~palQ(count),
highlightOptions = highlightOptions(
color = "red",
bringToFront = T),
label = ~labels,
color = "black",
weight = 1,
fillOpacity = 0.5,
noClip = T
)%>%
addLegend(
layerId = "legend",
position = "bottomleft",
values = tvz_matrix_filtered$count,
title = "amount trips destinations",
pal=palQ
)
})
}
#### RUN SHINY APP ####
shinyApp(ui, server)
